"use client"
import { playfair, poppins } from "@/utils/fonts"
import "./globals.css"
import { useState } from "react"
import { useForm, SubmitHandler } from "react-hook-form"
import Link from "next/link"
import { CloseIcon, SearchIcon } from "@/components/Icons"
import { useRouter } from "next/navigation"
import clsx from "clsx"

export const metadata = {
   title: "Endeavour: assignment nextjs 13",
   description: "Generated by create next app",
}

export default function RootLayout({
   children,
}: {
   children: React.ReactNode
}) {
   return (
      <html lang="en">
         <body className={`flex bg-contrast min-h-screen fixed inset-0 overflow-y-auto w-screen flex-col ${poppins.className}`}>
            <div className="px-4 md:px-14">
               <Header />
               <main className="py-10">
                  {children}
               </main>
            </div>
         </body>
      </html>
   )
}


interface FormValues {
   searchTerm: string
}

const Header = () => {
   const [showSearch, setShowSearch] = useState(false)
   const router = useRouter()
   const {
      register,
      reset,
      formState: {
         errors
      },
      handleSubmit
   } = useForm<FormValues>({
      defaultValues: {
         searchTerm: ""
      }
   })
   const submitHandler: SubmitHandler<FormValues> = ({ searchTerm }) => {
      reset()
      const params = new URLSearchParams()
      params.set("searchTerm", searchTerm)
      // router.push(`/search?${params.toString()}`)
   }

   return (
      <header className="flex border-b border-primary py-4 justify-between sticky top-0 bg-contrast z-50">
         {showSearch && (
            <form 
               className="absolute inset-0 bg-contrast/95 flex items-center p-2"
               onSubmit={handleSubmit(submitHandler)}
            >
               <div className="flex flex-1 items-center relative">
                  <input 
                     type="text" 
                     className={
                        clsx(
                           "flex-1 rounded",
                           errors.searchTerm ? "border-red-400" : "border-slate-300"
                        )
                     } 
                     placeholder="What are you searching for?"
                     {...register("searchTerm", {
                        required: "Search field cannot be empty!"
                     })}
                  />
                  {errors.searchTerm && <span className="absolute px-2 pt-[2px] bottom-0 translate-y-full bg-red-500 left-1 rounded-b text-contrast text-[8px] uppercase">{errors.searchTerm.message}</span>}
                  <button 
                     type="submit"
                     className="absolute right-4 text-gray-400" 
                  >
                     <SearchIcon size={22}/>
                  </button>
               </div>
               <button 
                  className="px-1"
                  onClick={() => setShowSearch(false)}
                  type="button"
               >
                  <CloseIcon className="text-slate-500" size={30} />
               </button>
            </form>
         )}
         <Link href={"/"}>
            <h1 className={`${playfair.className} font-bold text-2xl flex flex-col leading-5`}>
               <span className="text-accent">Rijks</span>
               <span className="">Museum</span>
            </h1>
         </Link>
         <div className="flex items-center mr-1 md:mr-4">
            <nav className="mr-8">
               <ul className="flex gap-4">
                  <li>Works</li>
                  <li>Artists</li>
               </ul>
            </nav>
            <button onClick={() => setShowSearch(true)}>
               <SearchIcon size={22}/>
            </button>
         </div>
      </header>
   )
}